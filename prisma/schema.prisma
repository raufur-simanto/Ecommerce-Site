// E-commerce Platform Database Schema
// Supports single-vendor storefront with scalable architecture

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // E-commerce relations
  profile    UserProfile?
  orders     Order[]
  reviews    Review[]
  wishlist   WishlistItem[]
  cart       CartItem[]
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String?
  lastName    String?
  phone       String?
  dateOfBirth DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Addresses
  addresses Address[]
}

model Address {
  id           String   @id @default(cuid())
  profileId    String
  type         AddressType @default(SHIPPING)
  firstName    String
  lastName     String
  company      String?
  street1      String
  street2      String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Order relations
  billingOrders  Order[] @relation("BillingAddress")
  shippingOrders Order[] @relation("ShippingAddress")
}

// Product Catalog
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([slug])
  @@index([parentId])
}

model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@index([slug])
}

model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?
  shortDescription String?
  sku             String   @unique
  barcode         String?
  price           Float
  comparePrice    Float?
  costPrice       Float?
  trackInventory  Boolean  @default(true)
  inventory       Int      @default(0)
  lowStockLevel   Int      @default(10)
  weight          Float?
  dimensions      String?
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  brandId    String?
  brand      Brand?   @relation(fields: [brandId], references: [id])

  // Product data
  images     ProductImage[]
  attributes ProductAttribute[]
  variants   ProductVariant[]
  reviews    Review[]
  tags       ProductTag[]

  // Commerce relations
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]

  @@index([slug])
  @@index([categoryId])
  @@index([brandId])
  @@index([isActive])
  @@index([isFeatured])
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductAttribute {
  id        String   @id @default(cuid())
  productId String
  name      String
  value     String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  name        String
  sku         String   @unique
  price       Float?
  inventory   Int      @default(0)
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  options ProductVariantOption[]

  @@index([productId])
  @@index([sku])
}

model ProductVariantOption {
  id        String @id @default(cuid())
  variantId String
  name      String
  value     String

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  products ProductTag[]

  @@index([slug])
}

model ProductTag {
  productId String
  tagId     String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
}

// Reviews and Ratings
model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  title     String?
  content   String?
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
}

// Shopping Cart
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
}

// Wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
}

// Orders and Payments
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // Amounts
  subtotal        Float
  taxAmount       Float     @default(0)
  shippingAmount  Float     @default(0)
  discountAmount  Float     @default(0)
  totalAmount     Float
  
  // Customer info
  customerEmail   String
  customerPhone   String?
  
  // Addresses
  billingAddressId  String?
  shippingAddressId String?
  
  // Metadata
  notes           String?
  internalNotes   String?
  tags            String?
  
  // Dates
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  billingAddress  Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  
  items           OrderItem[]
  payments        Payment[]
  shipments       Shipment[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  productName String   // Snapshot of product name
  productSku  String   // Snapshot of product SKU
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  createdAt   DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  status          PaymentStatus @default(PENDING)
  method          PaymentMethod
  amount          Float
  currency        String        @default("USD")
  
  // Payment processor data
  processorId     String?       // Stripe payment intent ID, etc.
  processorStatus String?
  processorData   Json?
  
  // Metadata
  failureReason   String?
  notes           String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Shipment {
  id            String            @id @default(cuid())
  orderId       String
  status        ShipmentStatus    @default(PENDING)
  trackingNumber String?
  carrier       String?
  method        String?
  cost          Float?
  estimatedDelivery DateTime?
  shippedAt     DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([trackingNumber])
}

// Coupons and Discounts
model Coupon {
  id               String      @id @default(cuid())
  code             String      @unique
  name             String
  description      String?
  type             CouponType
  value            Float
  minimumAmount    Float?
  maximumDiscount  Float?
  usageLimit       Int?
  usageCount       Int         @default(0)
  userLimit        Int?        // Per user limit
  isActive         Boolean     @default(true)
  startsAt         DateTime?
  expiresAt        DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([code])
  @@index([isActive])
}

// Analytics and Settings
model PageView {
  id         String   @id @default(cuid())
  path       String
  userAgent  String?
  ip         String?
  country    String?
  referer    String?
  createdAt  DateTime @default(now())

  @@index([path])
  @@index([createdAt])
}

model SiteSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  updatedAt DateTime @updatedAt

  @@index([key])
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  MODERATOR
}

enum AddressType {
  BILLING
  SHIPPING
  BOTH
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIAL
  FULFILLED
  RETURNED
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
  FAILED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}
